#!/usr/bin/bash

# hcl2json - convert HCL to JSON
#
# Usage:  hcl2json [options] path [path...]
#
# This is a wrapper around the Docker image of Thayne McCombs' hcl2json
# (https://github.com/tmccombs/hcl2json).
#
# This wrapper does not handle input from standard input; you need to supply it
# with at least one path.  Each path can be either a file or a directory.  For
# directories, each Terraform file within that directory and (by default) its
# sub-directories is processed.  If there is only one file to convert, it will
# parse that directly, but if there are several, it will encapsulate the outputs
# in a map, using the file names as keys.
#
# Options:
#   -c --colour       Force colour output.
#   -h --help         Print this help and quit.
#   -m --force-multi  Act as though multiple input files were provided.  I.e.,
#                     always encapsulate the output in a map with the file name
#                     as the key, even if there is only one file to process.
#   -R --no-recurse   Do not scan sub-directories for Terraform files.
#   -s --simplify     Simplify any expressions that don't use variables or
#                     unknown functions.
#   -x --exclude re   Exclude files matching the regular expression re.  The
#                     regex always tries to match the start and end of the
#                     string (^ and $ are implied), so you will usually want to
#                     include '.*' and either end of the regex.

which jq >/dev/null || {
  echo Please install jq. >&2
  exit 1
}

which docker >/dev/null || {
  echo Please install docker. >&2
  exit 1
}

# Extract switches
. <(process-options $0)

# Expand directories
files=()
maxdepth=
$(option R) && maxdepth='-maxdepth 1'
exclude=$(option x)
[ -z "$exclude" ] || exclude="-regex $exclude"
find-tf() {
  find "$1" $maxdepth \! $exclude -type f -name '*.tf'
}
while [ $# -gt 0 ]
do
  if [ -d "$1" ]
  then
    for file in $(find-tf "$1")
    do
      files+=("$file")
    done
  else
    files+=("$1")
  fi
  shift
done

docker_repo=tmccombs/hcl2json

get_docker_image() {
  docker image list --format json |
    jq -rs '
      map(select(.Repository == "'$docker_repo'")) |
      sort_by(.CreatedAt)[-1].ID
    '
}

docker_image=$(get_docker_image)
if [ -z $docker_image ]
then
  echo "No '$docker_repo' Docker image found." >&2
  docker pull $docker_repo:latest
  docker_image=$(get_docker_image)
  if [ -z $docker_image ]
  then
    echo "Could not retrieve '$docker_repo'." >&2
    exit 1
  fi
fi

hcl2json() {
  if [ -f "$1" ]
  then
    simplify=
    $(option s) && simplify=" -simplify"
    docker run -v $PWD:/srv $docker_image $simplify /srv/"$1"
  else
    echo "Failed to open '$1': no such file." >&2
    exit 1
  fi
}

get_json() {
  if ! $(option m) && [ ${#files[@]} -eq 1 ]
  then
    hcl2json "$files"
  else
    start=true
    echo '{'
    for file in "${files[@]}"
    do
      $start || echo ,
      start=false
      echo "\"$file\":"
      hcl2json "$file" || echo null
    done
    echo '}'
  fi
}
json=$(get_json)
colour=
$(option c) && colour='-C'
<<<"$json" jq $colour || exit $?
[ ! -z "$json" ] # Return an error code if there is no output
